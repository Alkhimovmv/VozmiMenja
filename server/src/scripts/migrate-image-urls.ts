import sqlite3 from 'sqlite3'
import { promisify } from 'util'
import path from 'path'

const dbPath = path.join(__dirname, '../../database.sqlite')

async function migrate() {
  const db = new sqlite3.Database(dbPath)
  const run = promisify(db.run.bind(db))
  const all = promisify(db.all.bind(db))

  try {
    console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ URL –∫–∞—Ä—Ç–∏–Ω–æ–∫...')

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    const equipment = await all('SELECT id, images FROM equipment') as Array<{ id: string; images: string }>

    let updatedCount = 0
    let totalImages = 0

    for (const item of equipment) {
      try {
        const images = JSON.parse(item.images)
        let hasChanges = false

        // –ó–∞–º–µ–Ω—è–µ–º localhost:3002 –Ω–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏
        const updatedImages = images.map((img: string) => {
          totalImages++
          if (img.includes('localhost:3002')) {
            hasChanges = true
            // –ó–∞–º–µ–Ω—è–µ–º http://localhost:3002/uploads/file.jpg –Ω–∞ /uploads/file.jpg
            return img.replace('http://localhost:3002', '')
          }
          if (img.includes('localhost:3001')) {
            hasChanges = true
            // –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º localhost:3001 –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –µ—Å—Ç—å
            return img.replace('http://localhost:3001', '')
          }
          return img
        })

        if (hasChanges) {
          // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
          await run(
            'UPDATE equipment SET images = ?, updated_at = CURRENT_TIMESTAMP WHERE id = ?',
            [JSON.stringify(updatedImages), item.id]
          )
          updatedCount++
          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${item.id}`)
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${item.id}:`, error)
      }
    }

    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:')
    console.log(`   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: ${equipment.length}`)
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`)
    console.log(`   –í—Å–µ–≥–æ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalImages}`)
    console.log('\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await new Promise<void>((resolve, reject) => {
      db.close((err) => {
        if (err) reject(err)
        else resolve()
      })
    })
  }
}

migrate()
  .then(() => process.exit(0))
  .catch(() => process.exit(1))

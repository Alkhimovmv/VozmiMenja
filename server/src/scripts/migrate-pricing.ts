import sqlite3 from 'sqlite3'
import { promisify } from 'util'
import path from 'path'

const dbPath = path.join(__dirname, '../../database.sqlite')

async function migrate() {
  const db = new sqlite3.Database(dbPath)
  const run = promisify(db.run.bind(db))

  try {
    console.log('üîÑ –ù–∞—á–∞–ª–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–ª–æ–Ω–∫–∞ pricing
    const all = promisify(db.all.bind(db))
    const columns = await all(`PRAGMA table_info(equipment)`) as any[]

    const hasPricing = columns.some(col => col.name === 'pricing')

    if (!hasPricing) {
      console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ pricing...')
      await run('ALTER TABLE equipment ADD COLUMN pricing TEXT')
      console.log('‚úÖ –ö–æ–ª–æ–Ω–∫–∞ pricing –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    } else {
      console.log('‚ÑπÔ∏è  –ö–æ–ª–æ–Ω–∫–∞ pricing —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error)
    throw error
  } finally {
    await new Promise<void>((resolve, reject) => {
      db.close((err) => {
        if (err) reject(err)
        else resolve()
      })
    })
  }
}

migrate()
  .then(() => process.exit(0))
  .catch(() => process.exit(1))

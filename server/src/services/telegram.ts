import TelegramBot from 'node-telegram-bot-api'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

class TelegramService {
  private bot: TelegramBot | null = null
  private chatId: string | null = null

  constructor() {
    const token = process.env.TELEGRAM_BOT_TOKEN
    const chatId = process.env.TELEGRAM_CHAT_ID

    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', {
      hasToken: !!token,
      tokenLength: token?.length,
      hasChatId: !!chatId,
      chatId: chatId
    })

    if (token && chatId) {
      this.bot = new TelegramBot(token, { polling: false })
      this.chatId = chatId
      console.log('‚úÖ Telegram –±–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
    } else {
      console.log('‚ö†Ô∏è  Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID)')
    }
  }

  async sendBookingNotification(data: {
    equipmentName: string
    customerName: string
    customerPhone: string
    customerEmail: string
    startDate: string
    endDate: string
    totalPrice: number
    comment?: string
  }) {
    if (!this.bot || !this.chatId) {
      console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      return
    }

    try {
      let message = `
üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä–µ–Ω–¥—É</b>

üì¶ <b>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</b> ${data.equipmentName}

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b>
‚Ä¢ –ò–º—è: ${data.customerName}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${data.customerPhone}
‚Ä¢ Email: ${data.customerEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üìÖ <b>–î–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã:</b>
‚Ä¢ –ù–∞—á–∞–ª–æ: ${this.formatDate(data.startDate)}
‚Ä¢ –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${this.formatDate(data.endDate)}

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${data.totalPrice}‚ÇΩ`

      if (data.comment) {
        message += `\n\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n${data.comment}`
      }

      message += `\n\nüëâ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è`
      message = message.trim()

      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'HTML'
      })

      console.log('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
    }
  }

  async sendContactMessage(data: {
    name: string
    phone: string
    email?: string
    subject: string
    message: string
  }) {
    if (!this.bot || !this.chatId) {
      console.log('Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      return
    }

    try {
      const subjectLabels: Record<string, string> = {
        rental: '–ê—Ä–µ–Ω–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        support: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        partnership: '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ',
        other: '–î—Ä—É–≥–æ–µ'
      }

      const message = `
üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</b>

üìã <b>–¢–µ–º–∞:</b> ${subjectLabels[data.subject] || data.subject}

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b>
‚Ä¢ –ò–º—è: ${data.name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}
‚Ä¢ Email: ${data.email || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${data.message}
      `.trim()

      await this.bot.sendMessage(this.chatId, message, {
        parse_mode: 'HTML'
      })

      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
    }
  }

  private formatDate(dateString: string): string {
    const date = new Date(dateString)
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    })
  }
}

export const telegramService = new TelegramService()
